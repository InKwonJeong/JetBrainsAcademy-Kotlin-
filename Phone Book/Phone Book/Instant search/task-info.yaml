type: edu
custom_name: stage4
files:
- name: test/PhoneBookTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;
    import phonebook.MainKt;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class PhoneBookTest extends BaseStageTest {
        public PhoneBookTest() {
            super(MainKt.class);
        }

        private long timeOnTestStart;

        @Override
        public List<TestCase> generate() {
            timeOnTestStart = System.currentTimeMillis();
            return Arrays.asList(
                    new TestCase().setTimeLimit(30 * 60 * 1000)
            );
        }


        private CheckResult checkPhrases(String reply, String... phrases) {
            reply = reply.toLowerCase();
            for (String phrase : phrases) {
                if (!reply.contains(phrase.toLowerCase())) {
                    return CheckResult.FALSE("Not found the part `" + phrase + "` in your output.");
                }
            }
            return CheckResult.TRUE;
        }

        private List<String> findAll(String reply, String regex) {
            Matcher matcher = Pattern.compile(regex).matcher(reply);
            List<String> groups = new ArrayList<>();
            while (matcher.find()) {
                groups.add(matcher.group());
            }
            return groups;
        }

        private String timeRegex = "(\\d+)\\s*min.*?(\\d+)\\s*sec.*?(\\d+)\\s*ms";
        private Pattern timeRegexPattern = Pattern.compile(timeRegex);

        private long parseTimestamp(String timestamp) {
            Matcher matcher = timeRegexPattern.matcher(timestamp);
            if (!matcher.matches() || matcher.groupCount() < 3) {
                throw new IllegalStateException("???Not matches the line " + timestamp);
            }
            int min = Integer.parseInt(matcher.group(1));
            int sec = Integer.parseInt(matcher.group(2));
            int ms = Integer.parseInt(matcher.group(3));
            return ms + sec * 1000 + min * 1000 * 60;
        }


        @Override
        public CheckResult check(String reply, Object clue) {
            long realTime = System.currentTimeMillis() - timeOnTestStart;
            reply = reply.toLowerCase();
            CheckResult res = checkPhrases(reply,
                    "found",
                    "min.",
                    "sec.",
                    "ms.",
                    "sorting time",
                    "searching time",
                    "linear search",
                    "bubble sort",
                    "jump search",
                    "quick sort",
                    "binary search",
                    "hash table",
                    "creating time"
            );
            if (!res.isCorrect()) {
                return res;
            }

            List<String> stat1 = findAll(reply, "500 / 500");
            List<String> stat2 = findAll(reply, "500/500");

            if (stat1.size() + stat2.size() < 4) {
                return CheckResult.FALSE("Your output should contain 4 times the phrase `500 / 500`");
            }

            List<String> timestamps = findAll(reply, timeRegex);
            if (timestamps.size() != 10) {
                return CheckResult.FALSE("Your output should contain 10 timer outputs, but found "
                        + timestamps.size());
            }
            // should not fail..
            long t1 = parseTimestamp(timestamps.get(0));
            long t2 = parseTimestamp(timestamps.get(1));
            long t3 = parseTimestamp(timestamps.get(2));
            long t4 = parseTimestamp(timestamps.get(3));
            // qsort
            long t5 = parseTimestamp(timestamps.get(4));
            long t6 = parseTimestamp(timestamps.get(5));
            long t7 = parseTimestamp(timestamps.get(6));
            // hash table
            long t8 = parseTimestamp(timestamps.get(7));
            long t9 = parseTimestamp(timestamps.get(8));
            long t10 = parseTimestamp(timestamps.get(9));

            if (Math.abs(t3 + t4 - t2) > 100) {
                return CheckResult.FALSE("Your third and fourth timer outputs in total (bubble sorting and searching) " +
                        "should be equal to the second (total search time).");
            }
            if (Math.abs(t6 + t7 - t5) > 100) {
                return CheckResult.FALSE("Your 6-th and 7-th timer outputs in total (qsort and searching) " +
                        "should be equal to the 5-th (total search time).");
            }
            if (Math.abs(t9 + t10 - t8) > 100) {
                return CheckResult.FALSE("Your 9-th and 10-th timer outputs in total (creating hashtable and searching) " +
                        "should be equal to the 8-th (total search time).");
            }

            long estimatedTime = t1 + t2 + t5 + t8;
            if (realTime < 1000) {
                return CheckResult.FALSE("Your program completes too fast. Faster than a second!");
            }

            if (Math.abs(estimatedTime - realTime) > estimatedTime * 0.3) {
                return CheckResult.FALSE("Your estimated time is not similar to real time the program works. " +
                        "Real time: " + realTime + "ms, estimated time: " + estimatedTime + "ms");
            }

            if (t8 >= t5) {
                return CheckResult.FALSE("Your hashtable works slower, than quick sort + binary search.");
            }
            return CheckResult.TRUE;
        }
    }
  learner_created: false
- name: src/phonebook/Main.kt
  visible: true
  text: |
    package phonebook

    import java.io.File
    import kotlin.math.sqrt

    private const val FILE_PATH = "C:\\Users\\wjd03\\Documents\\JetBrainsAcademy-Kotlin-\\File\\"

    private lateinit var phoneBook: Array<Contact>
    private lateinit var listedName: List<String>

    private lateinit var linearSearchTime: ProcessTime
    private lateinit var bubbleSortTime: ProcessTime
    private lateinit var jumpSearchTime: ProcessTime
    private lateinit var quickSortTime: ProcessTime
    private lateinit var binarySearchTime: ProcessTime

    data class Contact(
            val phoneNumber: String,
            val name: String
    )

    class ProcessTime(val time: Long) {
        val minute = (time / 1000 / 60) % 60
        val second = (time / 1000) % 60
        val millisecond = time % 1000

        override fun toString(): String {
            return "$minute min. $second sec. $millisecond ms."
        }
    }

    operator fun ProcessTime.plus(other: ProcessTime): ProcessTime {
        return ProcessTime(time + other.time)
    }

    fun main() {
        val phoneBookFile = File(FILE_PATH + "directory.txt")
        val listedNameFile = File(FILE_PATH + "find.txt")

        phoneBook = phoneBookFile.readLines().map {
            val list = it.split("\\s".toRegex(), 2)
            Contact(list[0], list[1])
        }.toTypedArray()

        listedName = listedNameFile.readLines()

        noSortAndLinearSearch()
        println()
        bubbleSortAndJumpSearch()
        println()
        quickSortAndBinarySearch()
    }

    fun processTime(block: () -> Unit): ProcessTime {
        val startTime = System.currentTimeMillis()
        block()
        val endTime = System.currentTimeMillis()
        return ProcessTime(endTime - startTime)
    }

    fun noSortAndLinearSearch() {
        println("Start searching (linear search)...")
        var count = 0
        linearSearchTime = processTime {
            for (name in listedName)
                if (linearSearch(name, phoneBook))
                    count++
        }

        println("Found $count / ${listedName.size} entries. Time taken: $linearSearchTime")
    }

    fun linearSearch(name: String, phoneBook: Array<Contact>): Boolean {
        var finish = false
        for (contact in phoneBook) {
            if (contact.name == name) {
                finish = true
                break
            }
        }
        return finish
    }

    fun bubbleSortAndJumpSearch() {
        println("Start searching (bubble sort + jump search)...")
        val sortedPhoneBook = phoneBook.copyOf()
        var sortDone = false
        bubbleSortTime = processTime {
            sortDone = bubbleSort(sortedPhoneBook)
        }

        var count = 0
        if (sortDone) {
            jumpSearchTime = processTime {
                for (name in listedName)
                    if (jumpSearch(name, sortedPhoneBook))
                        count++
            }

            println("Found $count / ${listedName.size} entries. " +
                    "Time taken: ${bubbleSortTime + jumpSearchTime}")
            println("Sorting time: $bubbleSortTime")
            println("Searching time: $jumpSearchTime")
        } else {
            linearSearchTime = processTime {
                for (name in listedName)
                    if (linearSearch(name, sortedPhoneBook))
                        count++
            }
            println("Found $count / ${listedName.size} entries. " +
                    "Time taken: ${bubbleSortTime + linearSearchTime}")
            println("Sorting time: $bubbleSortTime - STOPPED, moved to linear search")
            println("Searching time: $linearSearchTime")
        }
    }

    fun bubbleSort(phoneBook: Array<Contact>): Boolean {
        var finish = true
        val startTime = System.currentTimeMillis()
        var endTime = System.currentTimeMillis()
        for (i in phoneBook.lastIndex downTo 0) {
            if (linearSearchTime.time * 10 <= endTime - startTime) {
                finish = false
                break
            }

            for (j in 0 until i) {
                if (phoneBook[j].name > phoneBook[j + 1].name) {
                    swap(j, j + 1, phoneBook)
                }
            }
            endTime = System.currentTimeMillis()
        }

        return finish
    }

    fun jumpSearch(name: String, phoneBook: Array<Contact>): Boolean {
        val block = sqrt(phoneBook.size.toDouble()).toInt()
        var prev = -1
        var finish = false
        for (index in phoneBook.indices step block) {
            if (phoneBook[index].name >= name) {
                for (i in index downTo prev + 1) {
                    if (phoneBook[i].name == name) {
                        finish = true
                        break
                    }
                }
                break
            }
            prev = index
        }

        if (!finish && prev != phoneBook.lastIndex) {
            for (i in phoneBook.lastIndex downTo prev + 1) {
                if (phoneBook[i].name == name) {
                    finish = true
                    break
                }
            }
        }

        return finish
    }

    fun quickSortAndBinarySearch() {
        println("Start searching (quick sort + binary search)...")
        val sortedPhoneBook = phoneBook.copyOf()
        quickSortTime = processTime {
            quickSort(0, sortedPhoneBook.lastIndex, sortedPhoneBook)
        }

        var count = 0
        binarySearchTime = processTime {
            for (name in listedName)
                if(binarySearch(0, sortedPhoneBook.lastIndex, name, sortedPhoneBook))
                    count++
        }

        println("Found $count / ${listedName.size} entries. " +
                "Time taken: ${quickSortTime + binarySearchTime}")
        println("Sorting time: $quickSortTime")
        println("Searching time: $binarySearchTime")
    }

    fun quickSort(start: Int, end: Int, phoneBook: Array<Contact>) {
        val pivot = phoneBook[end]

        var left = start
        var right = end - 1
        do {
            while (left < end && phoneBook[left].name <= pivot.name) left++
            while (right > start && phoneBook[right].name >= pivot.name) right--
            if (left <= right)
                swap(left++, right--, phoneBook)
        } while (left <= right)

        swap(left, end, phoneBook)

        if (left < end)
            quickSort(left, end, phoneBook)
        if (right > start)
            quickSort(start, right, phoneBook)
    }

    fun binarySearch(start: Int, end: Int, name: String, phoneBook: Array<Contact>): Boolean {
        if(start > end)
            return false

        val mid = (start + end) / 2
        val contact = phoneBook[mid]

        return when {
            contact.name == name -> return true
            contact.name > name -> binarySearch(start, mid - 1, name, phoneBook)
            else -> binarySearch(mid + 1, end, name, phoneBook)
        }
    }

    fun swap(i1: Int, i2: Int, phoneBook: Array<Contact>) {
        val temp = phoneBook[i1]
        phoneBook[i1] = phoneBook[i2]
        phoneBook[i2] = temp
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/86/stages/479/implement
status: Solved
record: -1
