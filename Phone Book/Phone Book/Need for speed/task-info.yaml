type: edu
custom_name: stage3
files:
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.v6.stage.BaseStageTest;\nimport org.hyperskill.hstest.v6.testcase.CheckResult;\n\
    import org.hyperskill.hstest.v6.testcase.TestCase;\nimport phonebook.MainKt;\n\
    \nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class\
    \ PhoneBookTest extends BaseStageTest {\n    public PhoneBookTest() {\n      \
    \  super(MainKt.class);\n    }\n    \n    private long timeOnTestStart;\n    \n\
    \    @Override\n    public List<TestCase> generate() {\n        timeOnTestStart\
    \ = System.currentTimeMillis();\n        return Arrays.asList(\n             \
    \   new TestCase().setTimeLimit(30 * 60 * 1000)\n        );\n    }\n    \n   \
    \ private CheckResult checkPhrases(String reply, String... phrases) {\n      \
    \  reply = reply.toLowerCase();\n        for (String phrase : phrases) {\n   \
    \         if (!reply.contains(phrase.toLowerCase())) {\n                return\
    \ CheckResult.FALSE(\"Not found the part `\" + phrase + \"` in your output.\"\
    );\n            }\n        }\n        return CheckResult.TRUE;\n    }\n    \n\
    \    private List<String> findAll(String reply, String regex) {\n        Matcher\
    \ matcher = Pattern.compile(regex).matcher(reply);\n        List<String> groups\
    \ = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    @Override\n\
    \    public CheckResult check(String reply, Object clue) {\n        long realTime\
    \ = System.currentTimeMillis() - timeOnTestStart;\n        \n        reply = reply.toLowerCase();\n\
    \        \n        CheckResult res = checkPhrases(reply,\n                \"found\"\
    ,\n                \"min.\",\n                \"sec.\",\n                \"ms.\"\
    ,\n                \"sorting time\",\n                \"searching time\",\n  \
    \              \"linear search\",\n                \"bubble sort\",\n        \
    \        \"jump search\",\n                \"quick sort\",\n                \"\
    binary search\"\n        );\n        if (!res.isCorrect()) {\n            return\
    \ res;\n        }\n        \n        List<String> stat1 = findAll(reply, \"500\
    \ / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n     \
    \   \n        if (stat1.size() + stat2.size() < 3) {\n            return CheckResult.FALSE(\"\
    Your output should contain 3 times the phrase `500 / 500`\");\n        }\n   \
    \     \n        List<String> timestamps = findAll(reply, timeRegex);\n       \
    \ if (timestamps.size() != 7) {\n            return CheckResult.FALSE(\"Your output\
    \ should contain 7 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        long t5 = parseTimestamp(timestamps.get(4));\n\
    \        long t6 = parseTimestamp(timestamps.get(5));\n        long t7 = parseTimestamp(timestamps.get(6));\n\
    \        \n        if (Math.abs(t3 + t4 - t2) > 100) {\n            return CheckResult.FALSE(\"\
    Your third and fourth timer outputs in total (sorting and searching) \" +\n  \
    \                  \"should be equal to the second (total search time).\");\n\
    \        }\n        if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.FALSE(\"\
    Your 6-th and 7-th timer outputs in total (sorting and searching) \" +\n     \
    \               \"should be equal to the 5-th (total search time).\");\n     \
    \   }\n        \n        long estimatedTime = t1 + t2 + t5;\n        if (realTime\
    \ < 1000) {\n            return CheckResult.FALSE(\"Your program completes too\
    \ fast. Faster than a second!\");\n        }\n        \n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.FALSE(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        return CheckResult.TRUE;\n    }\n}\n"
  learner_created: false
- name: src/phonebook/Main.kt
  visible: true
  text: |
    package phonebook

    import java.io.File
    import kotlin.math.sqrt

    private const val FILE_PATH = "C:\\Users\\wjd03\\Documents\\JetBrainsAcademy-Kotlin-\\File\\"

    private lateinit var phoneBook: Array<Contact>
    private lateinit var listedName: List<String>

    private lateinit var linearSearchTime: ProcessTime
    private lateinit var bubbleSortTime: ProcessTime
    private lateinit var jumpSearchTime: ProcessTime
    private lateinit var quickSortTime: ProcessTime
    private lateinit var binarySearchTime: ProcessTime

    data class Contact(
            val phoneNumber: String,
            val name: String
    )

    class ProcessTime(val time: Long) {
        val minute = (time / 1000 / 60) % 60
        val second = (time / 1000) % 60
        val millisecond = time % 1000

        override fun toString(): String {
            return "$minute min. $second sec. $millisecond ms."
        }
    }

    operator fun ProcessTime.plus(other: ProcessTime): ProcessTime {
        return ProcessTime(time + other.time)
    }

    fun main() {
        val phoneBookFile = File(FILE_PATH + "directory.txt")
        val listedNameFile = File(FILE_PATH + "find.txt")

        phoneBook = phoneBookFile.readLines().map {
            val list = it.split("\\s".toRegex(), 2)
            Contact(list[0], list[1])
        }.toTypedArray()

        listedName = listedNameFile.readLines()

        noSortAndLinearSearch()
        println()
        bubbleSortAndJumpSearch()
        println()
        quickSortAndBinarySearch()
    }

    fun processTime(block: () -> Unit): ProcessTime {
        val startTime = System.currentTimeMillis()
        block()
        val endTime = System.currentTimeMillis()
        return ProcessTime(endTime - startTime)
    }

    fun noSortAndLinearSearch() {
        println("Start searching (linear search)...")
        var count = 0
        linearSearchTime = processTime {
            for (name in listedName)
                if (linearSearch(name, phoneBook))
                    count++
        }

        println("Found $count / ${listedName.size} entries. Time taken: $linearSearchTime")
    }

    fun linearSearch(name: String, phoneBook: Array<Contact>): Boolean {
        var finish = false
        for (contact in phoneBook) {
            if (contact.name == name) {
                finish = true
                break
            }
        }
        return finish
    }

    fun bubbleSortAndJumpSearch() {
        println("Start searching (bubble sort + jump search)...")
        val sortedPhoneBook = phoneBook.copyOf()
        var sortDone = false
        bubbleSortTime = processTime {
            sortDone = bubbleSort(sortedPhoneBook)
        }

        var count = 0
        if (sortDone) {
            jumpSearchTime = processTime {
                for (name in listedName)
                    if (jumpSearch(name, sortedPhoneBook))
                        count++
            }

            println("Found $count / ${listedName.size} entries. " +
                    "Time taken: ${bubbleSortTime + jumpSearchTime}")
            println("Sorting time: $bubbleSortTime")
            println("Searching time: $jumpSearchTime")
        } else {
            linearSearchTime = processTime {
                for (name in listedName)
                    if (linearSearch(name, sortedPhoneBook))
                        count++
            }
            println("Found $count / ${listedName.size} entries. " +
                    "Time taken: ${bubbleSortTime + linearSearchTime}")
            println("Sorting time: $bubbleSortTime - STOPPED, moved to linear search")
            println("Searching time: $linearSearchTime")
        }
    }

    fun bubbleSort(phoneBook: Array<Contact>): Boolean {
        var finish = true
        val startTime = System.currentTimeMillis()
        var endTime = System.currentTimeMillis()
        for (i in phoneBook.lastIndex downTo 0) {
            if (linearSearchTime.time * 10 <= endTime - startTime) {
                finish = false
                break
            }

            for (j in 0 until i) {
                if (phoneBook[j].name > phoneBook[j + 1].name) {
                    swap(j, j + 1, phoneBook)
                }
            }
            endTime = System.currentTimeMillis()
        }

        return finish
    }

    fun jumpSearch(name: String, phoneBook: Array<Contact>): Boolean {
        val block = sqrt(phoneBook.size.toDouble()).toInt()
        var prev = -1
        var finish = false
        for (index in phoneBook.indices step block) {
            if (phoneBook[index].name >= name) {
                for (i in index downTo prev + 1) {
                    if (phoneBook[i].name == name) {
                        finish = true
                        break
                    }
                }
                break
            }
            prev = index
        }

        if (!finish && prev != phoneBook.lastIndex) {
            for (i in phoneBook.lastIndex downTo prev + 1) {
                if (phoneBook[i].name == name) {
                    finish = true
                    break
                }
            }
        }

        return finish
    }

    fun quickSortAndBinarySearch() {
        println("Start searching (quick sort + binary search)...")
        val sortedPhoneBook = phoneBook.copyOf()
        quickSortTime = processTime {
            quickSort(0, sortedPhoneBook.lastIndex, sortedPhoneBook)
        }

        var count = 0
        binarySearchTime = processTime {
            for (name in listedName)
                if(binarySearch(0, sortedPhoneBook.lastIndex, name, sortedPhoneBook))
                    count++
        }

        println("Found $count / ${listedName.size} entries. " +
                "Time taken: ${quickSortTime + binarySearchTime}")
        println("Sorting time: $quickSortTime")
        println("Searching time: $binarySearchTime")
    }

    fun quickSort(start: Int, end: Int, phoneBook: Array<Contact>) {
        val pivot = phoneBook[end]

        var left = start
        var right = end - 1
        do {
            while (left < end && phoneBook[left].name <= pivot.name) left++
            while (right > start && phoneBook[right].name >= pivot.name) right--
            if (left <= right)
                swap(left++, right--, phoneBook)
        } while (left <= right)

        swap(left, end, phoneBook)

        if (left < end)
            quickSort(left, end, phoneBook)
        if (right > start)
            quickSort(start, right, phoneBook)
    }

    fun binarySearch(start: Int, end: Int, name: String, phoneBook: Array<Contact>): Boolean {
        if(start > end)
            return false

        val mid = (start + end) / 2
        val contact = phoneBook[mid]

        return when {
            contact.name == name -> return true
            contact.name > name -> binarySearch(start, mid - 1, name, phoneBook)
            else -> binarySearch(mid + 1, end, name, phoneBook)
        }
    }

    fun swap(i1: Int, i2: Int, phoneBook: Array<Contact>) {
        val temp = phoneBook[i1]
        phoneBook[i1] = phoneBook[i2]
        phoneBook[i2] = temp
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/86/stages/478/implement
status: Solved
record: 3
